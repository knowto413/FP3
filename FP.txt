【詳細版】FP3級CBTデモ試験ページ制作 要件定義書 Ver.2.0
1. プロジェクト概要
1.1. プロジェクト名
FP3級（ファイナンシャル・プランニング技能検定3級）CBTデモ試験ページ制作プロジェクト

1.2. 背景と目的
（前回と同様）2024年度からCBT方式に完全移行したFP3級試験の受験希望者に向け、本番に近い試験環境をWeb上で体験できるデモページを制作する。これにより、ユーザーはCBT試験の操作感や時間配分を事前に把握でき、試験当日の不安を軽減することを目的とする。

1.3. プロジェクトゴール（目標指標）

主要目標(KGI): 受験希望者の学習支援と、CBT方式への理解促進。

重要業績評価指標(KPI):

デモ試験完了率: 80%以上

ページ滞在時間（試験実施ユーザー）: 平均10分以上

ポジティブなSNSでの言及数

1.4. ターゲットユーザー

FP3級の受験を検討している、または学習中の個人。

PC、スマートフォン、タブレットでの学習を希望するユーザー。

年齢層は20代〜50代と幅広く、ITリテラシーも様々であることを想定する。

1.5. スコープ（対象範囲）

対象範囲（IN）:

学科試験を模した択一式問題の出題（10問程度）

試験画面UI/UXの提供（タイマー、問題ナビゲーション含む）

即時自動採点と、正解・解説付きの結果フィードバック

マルチデバイス対応（レスポンシブデザイン）

対象範囲外（OUT）:

ユーザーアカウント機能（登録、ログイン、成績保存）

実技試験のシミュレーション

問題データベースの網羅性（あくまでデモ用の抜粋問題）

決済機能、広告表示

2. 画面仕様と機能要件（詳細）
2.1. 画面遷移図

[トップページ]
    |
    | (「試験を開始する」をクリック)
    V
[試験画面] <-----> (問題ナビゲーションで行き来)
    |
    | (「試験を終了する」をクリック or 時間切れ)
    V
[結果表示画面]
    |
    | (「もう一度挑戦する」をクリック)
    V
[トップページ]
2.2. 各画面の仕様詳細

■ トップページ (index.html)

目的: 試験概要の提示と、試験開始への動線。

コンポーネント:

ヘッダー: サイトタイトル

メインコンテンツ:

キャッチコピー: 「FP3級CBT試験をWebで体験！」

概要説明:

試験形式: 学科試験（択一式）

問題数: 10問

制限時間: 15分

合格基準: 60%以上の正答（6問以上）

注意事項:

「本デモ試験は、CBT方式の操作感を体験いただくためのものです。」

「出題される問題や配点は、実際の試験とは異なります。」

CTAボタン:

ラベル: 「試験を開始する」

スタイル: 目を引くプライマリーカラーを使用。

インタラクション: ホバー時に若干色が濃くなる、または少し浮き上がるエフェクト。

フッター: コピーライト表記

■ 試験画面 (exam.html)

目的: 集中できる環境で、本番同様の解答プロセスをシミュレートする。

画面構成: 3カラムレイアウトを基本とする（PC表示時）。

左ペイン（問題ナビゲーション）:

全問題番号（1〜10）のボタンを一覧表示。

状態変化:

現在表示中の問題: 強調表示（例: 背景色を変更、太字）。

解答済みの問題: 色を変更（例: 青色）。

未解答の問題: デフォルト色。

クリックすると該当の問題へジャンプする。

中央ペイン（問題エリア）:

問題ヘッダー: 「問X / 10」形式で問題番号を表示。

問題文: スクロールが発生しないよう、適切な高さを確保。

選択肢:

ラジオボタン＋ラベルで構成。

ラベル部分のクリックでも選択可能にする。

一度選択した解答は、他の選択肢を選ぶことで変更可能。

右ペイン（操作・情報エリア）:

タイマー:

形式: MM:SS（例: 14:59）

1秒ごとにカウントダウン。

残り時間が5分を切ると文字色を黄色に、1分を切ると赤色に変更し、点滅させる。

時間切れの場合: 「時間切れです。自動的に採点します。」というモーダルダイアログを2秒間表示後、強制的に結果画面へ遷移する。

ページネーションボタン:

「＜ 前の問題へ」: 1問目ではdisabled（無効化）状態。

「次の問題へ ＞」: 最終問題ではラベルが「結果を見る」に変わる。

終了ボタン:

ラベル: 「試験を終了する」

クリックすると、確認モーダルダイアログを表示。

モーダルメッセージ:

全問解答済みの場合: 「試験を終了して採点しますか？」

未解答の問題がある場合: 「未解答の問題がX問あります。試験を終了しますか？」

モーダル内の「はい」で結果画面へ遷移、「いいえ」でモーダルを閉じる。

■ 結果表示画面 (result.html)

目的: 試験結果を明確にフィードバックし、学習の振り返りを促す。

コンポーネント:

総合結果エリア:

評価: 「合格」「不合格」を大きく表示。

スコア: 「あなたのスコア: 80点 (10問中8問正解)」のように表示。

所要時間: 試験にかかった時間を表示（例: 12分34秒）。

問題別フィードバックエリア:

各問題（1〜10）を一覧表示。

各問題ブロックの構成:

問題番号と正誤アイコン（○ or ×）。

あなたの解答と、正解の選択肢を表示。不正解の場合はあなたの解答を赤字で示す。

解説表示: 「解説を見る」ボタン（またはアコーディオンヘッダー）をクリックすると、該当問題の解説文がスライドダウンで表示される。

CTAエリア:

「もう一度挑戦する」ボタン（トップページへ遷移）。

SNSシェアボタン（Twitter, Facebook）: 「FP3級CBTデモ試験でXX点を獲得しました！ #FP3級」のような定型文をシェアできる。

3. データ構造（推奨）
問題データは、フロントエンドで管理しやすいようJavaScriptのオブジェクト配列形式で定義する。

JavaScript

// 例: questions.js
const questions = [
  {
    id: 1,
    statement: "景気動向指数（CI）において、景気の現状を示す指標は何か？", // 問題文
    choices: [ // 選択肢
      { id: 1, text: "先行指数" },
      { id: 2, text: "一致指数" },
      { id: 3, text: "遅行指数" }
    ],
    answerId: 2, // 正解の選択肢ID
    explanation: "景気の現状を示す指標は一致指数です。先行指数は景気の将来の動きを、遅行指数は景気の動きを事後的に確認する指標です。" // 解説文
  },
  // ... 問題2以降
];
4. 非機能要件（詳細）
パフォーマンス:

目標値: Core Web Vitalsの基準を満たす。

LCP (Largest Contentful Paint): 2.5秒以内

FID (First Input Delay): 100ミリ秒未満

CLS (Cumulative Layout Shift): 0.1未満

実装: 画像の最適化、CSS/JSの最小化、ブラウザキャッシュの活用。

セキュリティ:

XSS対策: ユーザー入力箇所はないが、ライブラリの利用などにおいて、既知の脆弱性がないか確認する。

その他: target="_blank" を使用するリンクには rel="noopener noreferrer" を付与する。

アクセシビリティ (WCAG 2.1 レベルAA準拠):

キーボード操作: 全てのインタラクティブ要素（ボタン、ラジオボタン、リンク）はTabキーでフォーカスでき、Enter/Spaceキーで実行可能にする。

セマンティックHTML: <h1>, <nav>, <main>, <button> などのHTMLタグを適切に使用し、文書構造を明確にする。

aria属性: ラジオボタンの状態やモーダルダイアログの役割など、動的に変化するUIには適切なARIA属性を付与する。

コントラスト: テキストと背景のコントラスト比は4.5:1以上を確保する。

対応環境:

ブラウザ: Google Chrome, Safari, Firefox, Microsoft Edgeの各最新バージョン。

デバイス: 画面幅 375px（スマートフォン）〜 1920px（フルHDデスクトップ）でレイアウト崩れなく表示されること。

5. コンテンツ要件
問題・解説作成:

担当: FP有資格者が監修。

内容: FP3級の6分野（ライフプランニング、リスク管理、金融資産運用、タックスプランニング、不動産、相続・事業承継）からバランス良く10問を抜粋。

形式: 上記「3. データ構造」に準拠した形式（スプレッドシート等）で用意。

納期: [具体的な日付]

6. 技術スタック（推奨）
フロントエンド:

HTML5 / CSS3 (Sass)

JavaScript (ES2020+)

フレームワーク: React (Next.js) または Vue.js (Nuxt.js) の利用を推奨。コンポーネントベースでの開発効率と、将来的な機能拡張のしやすさを考慮。

状態管理:

Reactの場合: Context API または Zustand

Vueの場合: Pinia

ホスティング/デプロイ:

Vercel または Netlify。GitHubリポジトリと連携し、CI/CDを構築する。